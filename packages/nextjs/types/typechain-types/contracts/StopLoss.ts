/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace StopLoss {
  export type OrderStruct = {
    orderStatus: PromiseOrValue<BigNumberish>;
    orderType: PromiseOrValue<BigNumberish>;
    buyer: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
    triggerPercent: PromiseOrValue<BigNumberish>;
    sellAmount: PromiseOrValue<BigNumberish>;
    buyAmount: PromiseOrValue<BigNumberish>;
    sellToComplete: PromiseOrValue<BigNumberish>;
    buyToComplete: PromiseOrValue<BigNumberish>;
  };

  export type OrderStructOutput = [
    number,
    number,
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    orderStatus: number;
    orderType: number;
    buyer: string;
    timestamp: number;
    triggerPercent: number;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
    sellToComplete: BigNumber;
    buyToComplete: BigNumber;
  };

  export type OrderDataStruct = {
    sellToken: PromiseOrValue<string>;
    buyToken: PromiseOrValue<string>;
    index: PromiseOrValue<BigNumberish>;
    order: StopLoss.OrderStruct;
  };

  export type OrderDataStructOutput = [
    string,
    string,
    BigNumber,
    StopLoss.OrderStructOutput
  ] & {
    sellToken: string;
    buyToken: string;
    index: BigNumber;
    order: StopLoss.OrderStructOutput;
  };
}

export interface StopLossInterface extends utils.Interface {
  functions: {
    "CONTROLLER_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PERCENT_DIVISOR()": FunctionFragment;
    "PRICE_DECIMALS()": FunctionFragment;
    "WETH()": FunctionFragment;
    "addOrder(uint8,address,address,uint128,uint128,uint16)": FunctionFragment;
    "allOrders(uint256)": FunctionFragment;
    "canExecuteOrder(address,address,uint256)": FunctionFragment;
    "cancelOrder(address,address,uint256)": FunctionFragment;
    "countAllOrders()": FunctionFragment;
    "countOrders(address,address)": FunctionFragment;
    "executeOrder(address,address,uint256,uint256)": FunctionFragment;
    "fetchPageOrders(uint256,uint256)": FunctionFragment;
    "getOrder(address,address,uint256)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "orders(address,address,uint256)": FunctionFragment;
    "priceOracle()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "stopLossMinimal()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "updatePriceOracle(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CONTROLLER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "PERCENT_DIVISOR"
      | "PRICE_DECIMALS"
      | "WETH"
      | "addOrder"
      | "allOrders"
      | "canExecuteOrder"
      | "cancelOrder"
      | "countAllOrders"
      | "countOrders"
      | "executeOrder"
      | "fetchPageOrders"
      | "getOrder"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "orders"
      | "priceOracle"
      | "renounceRole"
      | "revokeRole"
      | "stopLossMinimal"
      | "supportsInterface"
      | "updatePriceOracle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERCENT_DIVISOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PRICE_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOrder",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allOrders",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "countAllOrders",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countOrders",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchPageOrders",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrder",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "priceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "stopLossMinimal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceOracle",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERCENT_DIVISOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PRICE_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countAllOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchPageOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopLossMinimal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceOracle",
    data: BytesLike
  ): Result;

  events: {
    "Add(address,address,address,uint256,tuple)": EventFragment;
    "Cancel(address,address,address,uint256,tuple)": EventFragment;
    "Execute(address,address,address,uint256,uint256,tuple,tuple)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Add"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AddEventObject {
  sender: string;
  sellToken: string;
  buyToken: string;
  index: BigNumber;
  order: StopLoss.OrderStructOutput;
}
export type AddEvent = TypedEvent<
  [string, string, string, BigNumber, StopLoss.OrderStructOutput],
  AddEventObject
>;

export type AddEventFilter = TypedEventFilter<AddEvent>;

export interface CancelEventObject {
  sender: string;
  sellToken: string;
  buyToken: string;
  index: BigNumber;
  order: StopLoss.OrderStructOutput;
}
export type CancelEvent = TypedEvent<
  [string, string, string, BigNumber, StopLoss.OrderStructOutput],
  CancelEventObject
>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface ExecuteEventObject {
  sender: string;
  sellToken: string;
  buyToken: string;
  indexA: BigNumber;
  indexB: BigNumber;
  orderA: StopLoss.OrderStructOutput;
  orderB: StopLoss.OrderStructOutput;
}
export type ExecuteEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    StopLoss.OrderStructOutput,
    StopLoss.OrderStructOutput
  ],
  ExecuteEventObject
>;

export type ExecuteEventFilter = TypedEventFilter<ExecuteEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface StopLoss extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StopLossInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CONTROLLER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH(overrides?: CallOverrides): Promise<[string]>;

    addOrder(
      orderType: PromiseOrValue<BigNumberish>,
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      triggerPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        sellToken: string;
        buyToken: string;
        index: BigNumber;
      }
    >;

    canExecuteOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexOrder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    cancelOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    countAllOrders(overrides?: CallOverrides): Promise<[BigNumber]>;

    countOrders(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexA: PromiseOrValue<BigNumberish>,
      indexB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchPageOrders(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [StopLoss.OrderDataStructOutput[], BigNumber] & {
        values: StopLoss.OrderDataStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[StopLoss.OrderStructOutput]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _priceOracle: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderStatus: number;
        orderType: number;
        buyer: string;
        timestamp: number;
        triggerPercent: number;
        sellAmount: BigNumber;
        buyAmount: BigNumber;
        sellToComplete: BigNumber;
        buyToComplete: BigNumber;
      }
    >;

    priceOracle(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopLossMinimal(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updatePriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

  PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  WETH(overrides?: CallOverrides): Promise<string>;

  addOrder(
    orderType: PromiseOrValue<BigNumberish>,
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    sellAmount: PromiseOrValue<BigNumberish>,
    buyAmount: PromiseOrValue<BigNumberish>,
    triggerPercent: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allOrders(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      sellToken: string;
      buyToken: string;
      index: BigNumber;
    }
  >;

  canExecuteOrder(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    indexOrder: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  cancelOrder(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  countAllOrders(overrides?: CallOverrides): Promise<BigNumber>;

  countOrders(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeOrder(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    indexA: PromiseOrValue<BigNumberish>,
    indexB: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchPageOrders(
    cursor: PromiseOrValue<BigNumberish>,
    howMany: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [StopLoss.OrderDataStructOutput[], BigNumber] & {
      values: StopLoss.OrderDataStructOutput[];
      newCursor: BigNumber;
    }
  >;

  getOrder(
    sellToken: PromiseOrValue<string>,
    buyToken: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<StopLoss.OrderStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _priceOracle: PromiseOrValue<string>,
    _WETH: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  orders(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      string,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      orderStatus: number;
      orderType: number;
      buyer: string;
      timestamp: number;
      triggerPercent: number;
      sellAmount: BigNumber;
      buyAmount: BigNumber;
      sellToComplete: BigNumber;
      buyToComplete: BigNumber;
    }
  >;

  priceOracle(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopLossMinimal(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  updatePriceOracle(
    _priceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CONTROLLER_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<string>;

    addOrder(
      orderType: PromiseOrValue<BigNumberish>,
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      triggerPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    allOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        sellToken: string;
        buyToken: string;
        index: BigNumber;
      }
    >;

    canExecuteOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexOrder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    cancelOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    countAllOrders(overrides?: CallOverrides): Promise<BigNumber>;

    countOrders(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexA: PromiseOrValue<BigNumberish>,
      indexB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fetchPageOrders(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [StopLoss.OrderDataStructOutput[], BigNumber] & {
        values: StopLoss.OrderDataStructOutput[];
        newCursor: BigNumber;
      }
    >;

    getOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<StopLoss.OrderStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _priceOracle: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        orderStatus: number;
        orderType: number;
        buyer: string;
        timestamp: number;
        triggerPercent: number;
        sellAmount: BigNumber;
        buyAmount: BigNumber;
        sellToComplete: BigNumber;
        buyToComplete: BigNumber;
      }
    >;

    priceOracle(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stopLossMinimal(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    updatePriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Add(address,address,address,uint256,tuple)"(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      index?: null,
      order?: null
    ): AddEventFilter;
    Add(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      index?: null,
      order?: null
    ): AddEventFilter;

    "Cancel(address,address,address,uint256,tuple)"(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      index?: null,
      order?: null
    ): CancelEventFilter;
    Cancel(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      index?: null,
      order?: null
    ): CancelEventFilter;

    "Execute(address,address,address,uint256,uint256,tuple,tuple)"(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      indexA?: null,
      indexB?: null,
      orderA?: null,
      orderB?: null
    ): ExecuteEventFilter;
    Execute(
      sender?: PromiseOrValue<string> | null,
      sellToken?: PromiseOrValue<string> | null,
      buyToken?: PromiseOrValue<string> | null,
      indexA?: null,
      indexB?: null,
      orderA?: null,
      orderB?: null
    ): ExecuteEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    CONTROLLER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<BigNumber>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addOrder(
      orderType: PromiseOrValue<BigNumberish>,
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      triggerPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canExecuteOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexOrder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    countAllOrders(overrides?: CallOverrides): Promise<BigNumber>;

    countOrders(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexA: PromiseOrValue<BigNumberish>,
      indexB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchPageOrders(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _priceOracle: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    priceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopLossMinimal(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONTROLLER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERCENT_DIVISOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICE_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOrder(
      orderType: PromiseOrValue<BigNumberish>,
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      sellAmount: PromiseOrValue<BigNumberish>,
      buyAmount: PromiseOrValue<BigNumberish>,
      triggerPercent: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allOrders(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canExecuteOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexOrder: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    countAllOrders(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countOrders(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      indexA: PromiseOrValue<BigNumberish>,
      indexB: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchPageOrders(
      cursor: PromiseOrValue<BigNumberish>,
      howMany: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrder(
      sellToken: PromiseOrValue<string>,
      buyToken: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _priceOracle: PromiseOrValue<string>,
      _WETH: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopLossMinimal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePriceOracle(
      _priceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
