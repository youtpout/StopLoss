/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PriceFeedUsdcMock,
  PriceFeedUsdcMockInterface,
} from "../../contracts/PriceFeedUsdcMock";

const _abi = [
  {
    inputs: [],
    name: "answer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526305f5c9f460005534801561001857600080fd5b506102fa806100286000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c8063313ce5671461006757806354fd4d501461007b5780637284e4161461008c57806385bb7d69146100b85780639a6fc8f5146100c1578063feaf968c1461010b575b600080fd5b604051600881526020015b60405180910390f35b60045b604051908152602001610072565b604080518082018252600a8152691554d110c80bc81554d160b21b6020820152905161007291906101b3565b61007e60005481565b6100d46100cf366004610201565b610113565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a001610072565b6100d461016b565b6000806000806000858669ffffffffffffffffffff16600054610136919061024a565b6101426103e842610271565b61014e6101f442610271565b6101598a600161028a565b939a9299509097509550909350915050565b60008080808061017c42600a6102ad565b60005461018b6101f442610271565b6101976101f442610271565b6101a242600a6102ad565b945094509450945094509091929394565b600060208083528351808285015260005b818110156101e0578581018301518582016040015282016101c4565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561021357600080fd5b813569ffffffffffffffffffff8116811461022d57600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561026a5761026a610234565b5092915050565b8181038181111561028457610284610234565b92915050565b69ffffffffffffffffffff81811683821601908082111561026a5761026a610234565b80820281158282048414176102845761028461023456fea264697066735822122030f05ccee2e3c464924d751e81f7ee6498d17a3bc846b706214430d9818d576564736f6c63430008110033";

type PriceFeedUsdcMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceFeedUsdcMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceFeedUsdcMock__factory extends ContractFactory {
  constructor(...args: PriceFeedUsdcMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PriceFeedUsdcMock> {
    return super.deploy(overrides || {}) as Promise<PriceFeedUsdcMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceFeedUsdcMock {
    return super.attach(address) as PriceFeedUsdcMock;
  }
  override connect(signer: Signer): PriceFeedUsdcMock__factory {
    return super.connect(signer) as PriceFeedUsdcMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceFeedUsdcMockInterface {
    return new utils.Interface(_abi) as PriceFeedUsdcMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceFeedUsdcMock {
    return new Contract(address, _abi, signerOrProvider) as PriceFeedUsdcMock;
  }
}
