// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Add extends ethereum.Event {
  get params(): Add__Params {
    return new Add__Params(this);
  }
}

export class Add__Params {
  _event: Add;

  constructor(event: Add) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sellToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get order(): AddOrderStruct {
    return changetype<AddOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class AddOrderStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class Cancel extends ethereum.Event {
  get params(): Cancel__Params {
    return new Cancel__Params(this);
  }
}

export class Cancel__Params {
  _event: Cancel;

  constructor(event: Cancel) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sellToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get order(): CancelOrderStruct {
    return changetype<CancelOrderStruct>(
      this._event.parameters[4].value.toTuple()
    );
  }
}

export class CancelOrderStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class Execute extends ethereum.Event {
  get params(): Execute__Params {
    return new Execute__Params(this);
  }
}

export class Execute__Params {
  _event: Execute;

  constructor(event: Execute) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sellToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get buyToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get indexA(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get indexB(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get orderA(): ExecuteOrderAStruct {
    return changetype<ExecuteOrderAStruct>(
      this._event.parameters[5].value.toTuple()
    );
  }

  get orderB(): ExecuteOrderBStruct {
    return changetype<ExecuteOrderBStruct>(
      this._event.parameters[6].value.toTuple()
    );
  }
}

export class ExecuteOrderAStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class ExecuteOrderBStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StopLoss__allOrdersResult {
  value0: Address;
  value1: Address;
  value2: BigInt;

  constructor(value0: Address, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getSellToken(): Address {
    return this.value0;
  }

  getBuyToken(): Address {
    return this.value1;
  }

  getIndex(): BigInt {
    return this.value2;
  }
}

export class StopLoss__fetchPageOrdersResultValuesStruct extends ethereum.Tuple {
  get sellToken(): Address {
    return this[0].toAddress();
  }

  get buyToken(): Address {
    return this[1].toAddress();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }

  get order(): StopLoss__fetchPageOrdersResultValuesOrderStruct {
    return changetype<StopLoss__fetchPageOrdersResultValuesOrderStruct>(
      this[3].toTuple()
    );
  }
}

export class StopLoss__fetchPageOrdersResultValuesOrderStruct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class StopLoss__fetchPageOrdersResult {
  value0: Array<StopLoss__fetchPageOrdersResultValuesStruct>;
  value1: BigInt;

  constructor(
    value0: Array<StopLoss__fetchPageOrdersResultValuesStruct>,
    value1: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTupleArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValues(): Array<StopLoss__fetchPageOrdersResultValuesStruct> {
    return this.value0;
  }

  getNewCursor(): BigInt {
    return this.value1;
  }
}

export class StopLoss__getOrderResultValue0Struct extends ethereum.Tuple {
  get orderStatus(): i32 {
    return this[0].toI32();
  }

  get orderType(): i32 {
    return this[1].toI32();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get triggerPercent(): i32 {
    return this[4].toI32();
  }

  get sellAmount(): BigInt {
    return this[5].toBigInt();
  }

  get buyAmount(): BigInt {
    return this[6].toBigInt();
  }

  get sellToComplete(): BigInt {
    return this[7].toBigInt();
  }

  get buyToComplete(): BigInt {
    return this[8].toBigInt();
  }
}

export class StopLoss__ordersResult {
  value0: i32;
  value1: i32;
  value2: Address;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;
  value8: BigInt;

  constructor(
    value0: i32,
    value1: i32,
    value2: Address,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt,
    value8: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromUnsignedBigInt(this.value8));
    return map;
  }

  getOrderStatus(): i32 {
    return this.value0;
  }

  getOrderType(): i32 {
    return this.value1;
  }

  getBuyer(): Address {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }

  getTriggerPercent(): i32 {
    return this.value4;
  }

  getSellAmount(): BigInt {
    return this.value5;
  }

  getBuyAmount(): BigInt {
    return this.value6;
  }

  getSellToComplete(): BigInt {
    return this.value7;
  }

  getBuyToComplete(): BigInt {
    return this.value8;
  }
}

export class StopLoss extends ethereum.SmartContract {
  static bind(address: Address): StopLoss {
    return new StopLoss("StopLoss", address);
  }

  CONTROLLER_ROLE(): Bytes {
    let result = super.call(
      "CONTROLLER_ROLE",
      "CONTROLLER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CONTROLLER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CONTROLLER_ROLE",
      "CONTROLLER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PERCENT_DIVISOR(): BigInt {
    let result = super.call(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_PERCENT_DIVISOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PERCENT_DIVISOR",
      "PERCENT_DIVISOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRICE_DECIMALS(): BigInt {
    let result = super.call("PRICE_DECIMALS", "PRICE_DECIMALS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRICE_DECIMALS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PRICE_DECIMALS",
      "PRICE_DECIMALS():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  WETH(): Address {
    let result = super.call("WETH", "WETH():(address)", []);

    return result[0].toAddress();
  }

  try_WETH(): ethereum.CallResult<Address> {
    let result = super.tryCall("WETH", "WETH():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allOrders(param0: BigInt): StopLoss__allOrdersResult {
    let result = super.call(
      "allOrders",
      "allOrders(uint256):(address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new StopLoss__allOrdersResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt()
    );
  }

  try_allOrders(
    param0: BigInt
  ): ethereum.CallResult<StopLoss__allOrdersResult> {
    let result = super.tryCall(
      "allOrders",
      "allOrders(uint256):(address,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StopLoss__allOrdersResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt()
      )
    );
  }

  canExecuteOrder(
    sellToken: Address,
    buyToken: Address,
    indexOrder: BigInt
  ): boolean {
    let result = super.call(
      "canExecuteOrder",
      "canExecuteOrder(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken),
        ethereum.Value.fromUnsignedBigInt(indexOrder)
      ]
    );

    return result[0].toBoolean();
  }

  try_canExecuteOrder(
    sellToken: Address,
    buyToken: Address,
    indexOrder: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canExecuteOrder",
      "canExecuteOrder(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken),
        ethereum.Value.fromUnsignedBigInt(indexOrder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  countAllOrders(): BigInt {
    let result = super.call("countAllOrders", "countAllOrders():(uint256)", []);

    return result[0].toBigInt();
  }

  try_countAllOrders(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countAllOrders",
      "countAllOrders():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  countOrders(sellToken: Address, buyToken: Address): BigInt {
    let result = super.call(
      "countOrders",
      "countOrders(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_countOrders(
    sellToken: Address,
    buyToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "countOrders",
      "countOrders(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fetchPageOrders(
    cursor: BigInt,
    howMany: BigInt
  ): StopLoss__fetchPageOrdersResult {
    let result = super.call(
      "fetchPageOrders",
      "fetchPageOrders(uint256,uint256):((address,address,uint256,(uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128))[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(howMany)
      ]
    );

    return new StopLoss__fetchPageOrdersResult(
      result[0].toTupleArray<StopLoss__fetchPageOrdersResultValuesStruct>(),
      result[1].toBigInt()
    );
  }

  try_fetchPageOrders(
    cursor: BigInt,
    howMany: BigInt
  ): ethereum.CallResult<StopLoss__fetchPageOrdersResult> {
    let result = super.tryCall(
      "fetchPageOrders",
      "fetchPageOrders(uint256,uint256):((address,address,uint256,(uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128))[],uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(cursor),
        ethereum.Value.fromUnsignedBigInt(howMany)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StopLoss__fetchPageOrdersResult(
        value[0].toTupleArray<StopLoss__fetchPageOrdersResultValuesStruct>(),
        value[1].toBigInt()
      )
    );
  }

  getOrder(
    sellToken: Address,
    buyToken: Address,
    index: BigInt
  ): StopLoss__getOrderResultValue0Struct {
    let result = super.call(
      "getOrder",
      "getOrder(address,address,uint256):((uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return changetype<StopLoss__getOrderResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOrder(
    sellToken: Address,
    buyToken: Address,
    index: BigInt
  ): ethereum.CallResult<StopLoss__getOrderResultValue0Struct> {
    let result = super.tryCall(
      "getOrder",
      "getOrder(address,address,uint256):((uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128))",
      [
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<StopLoss__getOrderResultValue0Struct>(value[0].toTuple())
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  orders(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): StopLoss__ordersResult {
    let result = super.call(
      "orders",
      "orders(address,address,uint256):(uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );

    return new StopLoss__ordersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBigInt()
    );
  }

  try_orders(
    param0: Address,
    param1: Address,
    param2: BigInt
  ): ethereum.CallResult<StopLoss__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(address,address,uint256):(uint8,uint8,address,uint32,uint16,uint128,uint128,uint128,uint128)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StopLoss__ordersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBigInt()
      )
    );
  }

  priceOracle(): Address {
    let result = super.call("priceOracle", "priceOracle():(address)", []);

    return result[0].toAddress();
  }

  try_priceOracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("priceOracle", "priceOracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stopLossMinimal(): BigInt {
    let result = super.call(
      "stopLossMinimal",
      "stopLossMinimal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stopLossMinimal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stopLossMinimal",
      "stopLossMinimal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class AddOrderCall extends ethereum.Call {
  get inputs(): AddOrderCall__Inputs {
    return new AddOrderCall__Inputs(this);
  }

  get outputs(): AddOrderCall__Outputs {
    return new AddOrderCall__Outputs(this);
  }
}

export class AddOrderCall__Inputs {
  _call: AddOrderCall;

  constructor(call: AddOrderCall) {
    this._call = call;
  }

  get orderType(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get sellToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get buyToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sellAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get buyAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get triggerPercent(): i32 {
    return this._call.inputValues[5].value.toI32();
  }
}

export class AddOrderCall__Outputs {
  _call: AddOrderCall;

  constructor(call: AddOrderCall) {
    this._call = call;
  }
}

export class CancelOrderCall extends ethereum.Call {
  get inputs(): CancelOrderCall__Inputs {
    return new CancelOrderCall__Inputs(this);
  }

  get outputs(): CancelOrderCall__Outputs {
    return new CancelOrderCall__Outputs(this);
  }
}

export class CancelOrderCall__Inputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }

  get sellToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buyToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get index(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CancelOrderCall__Outputs {
  _call: CancelOrderCall;

  constructor(call: CancelOrderCall) {
    this._call = call;
  }
}

export class ExecuteOrderCall extends ethereum.Call {
  get inputs(): ExecuteOrderCall__Inputs {
    return new ExecuteOrderCall__Inputs(this);
  }

  get outputs(): ExecuteOrderCall__Outputs {
    return new ExecuteOrderCall__Outputs(this);
  }
}

export class ExecuteOrderCall__Inputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }

  get sellToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get buyToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get indexA(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get indexB(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ExecuteOrderCall__Outputs {
  _call: ExecuteOrderCall;

  constructor(call: ExecuteOrderCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _WETH(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class UpdatePriceOracleCall extends ethereum.Call {
  get inputs(): UpdatePriceOracleCall__Inputs {
    return new UpdatePriceOracleCall__Inputs(this);
  }

  get outputs(): UpdatePriceOracleCall__Outputs {
    return new UpdatePriceOracleCall__Outputs(this);
  }
}

export class UpdatePriceOracleCall__Inputs {
  _call: UpdatePriceOracleCall;

  constructor(call: UpdatePriceOracleCall) {
    this._call = call;
  }

  get _priceOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdatePriceOracleCall__Outputs {
  _call: UpdatePriceOracleCall;

  constructor(call: UpdatePriceOracleCall) {
    this._call = call;
  }
}
