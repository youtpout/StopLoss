/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface YourContractInterface extends utils.Interface {
  functions: {
    "greeting()": FunctionFragment;
    "owner()": FunctionFragment;
    "premium()": FunctionFragment;
    "setGreeting(string)": FunctionFragment;
    "totalCounter()": FunctionFragment;
    "userGreetingCounter(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "greeting"
      | "owner"
      | "premium"
      | "setGreeting"
      | "totalCounter"
      | "userGreetingCounter"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "greeting", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "premium", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGreeting",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userGreetingCounter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "greeting", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "premium", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGreeting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userGreetingCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "GreetingChange(address,string,bool,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GreetingChange"): EventFragment;
}

export interface GreetingChangeEventObject {
  greetingSetter: string;
  newGreeting: string;
  premium: boolean;
  value: BigNumber;
}
export type GreetingChangeEvent = TypedEvent<
  [string, string, boolean, BigNumber],
  GreetingChangeEventObject
>;

export type GreetingChangeEventFilter = TypedEventFilter<GreetingChangeEvent>;

export interface YourContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YourContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    greeting(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    premium(overrides?: CallOverrides): Promise<[boolean]>;

    setGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    userGreetingCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  greeting(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  premium(overrides?: CallOverrides): Promise<boolean>;

  setGreeting(
    _newGreeting: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalCounter(overrides?: CallOverrides): Promise<BigNumber>;

  userGreetingCounter(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    greeting(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    premium(overrides?: CallOverrides): Promise<boolean>;

    setGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    userGreetingCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GreetingChange(address,string,bool,uint256)"(
      greetingSetter?: PromiseOrValue<string> | null,
      newGreeting?: null,
      premium?: null,
      value?: null
    ): GreetingChangeEventFilter;
    GreetingChange(
      greetingSetter?: PromiseOrValue<string> | null,
      newGreeting?: null,
      premium?: null,
      value?: null
    ): GreetingChangeEventFilter;
  };

  estimateGas: {
    greeting(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    premium(overrides?: CallOverrides): Promise<BigNumber>;

    setGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    userGreetingCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    greeting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    premium(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGreeting(
      _newGreeting: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userGreetingCounter(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
