/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PriceFeedEthMock,
  PriceFeedEthMockInterface,
} from "../../contracts/PriceFeedEthMock";

const _abi = [
  {
    inputs: [],
    name: "answer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer_",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "setAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052642aee33d24060005534801561001957600080fd5b50610342806100296000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806385bb7d691161005b57806385bb7d69146100d257806399213cd8146100db5780639a6fc8f5146100f0578063feaf968c1461013a57600080fd5b8063313ce5671461008257806354fd4d50146100965780637284e416146100a7575b600080fd5b604051600881526020015b60405180910390f35b60045b60405190815260200161008d565b6040805180820182526009815268115512080bc81554d160ba1b6020820152905161008d91906101e2565b61009960005481565b6100ee6100e9366004610230565b600055565b005b6101036100fe366004610249565b610142565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a00161008d565b61010361019a565b6000806000806000858669ffffffffffffffffffff166000546101659190610292565b6101716103e8426102b9565b61017d6101f4426102b9565b6101888a60016102d2565b939a9299509097509550909350915050565b6000808080806101ab42600a6102f5565b6000546101ba6101f4426102b9565b6101c66101f4426102b9565b6101d142600a6102f5565b945094509450945094509091929394565b600060208083528351808285015260005b8181101561020f578581018301518582016040015282016101f3565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561024257600080fd5b5035919050565b60006020828403121561025b57600080fd5b813569ffffffffffffffffffff8116811461027557600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810360008312801583831316838312821617156102b2576102b261027c565b5092915050565b818103818111156102cc576102cc61027c565b92915050565b69ffffffffffffffffffff8181168382160190808211156102b2576102b261027c565b80820281158282048414176102cc576102cc61027c56fea2646970667358221220ca64dfeccb938b01c54f0d43bd1a6038d6bbff50444d48979d7779f101e9286e64736f6c63430008110033";

type PriceFeedEthMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriceFeedEthMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriceFeedEthMock__factory extends ContractFactory {
  constructor(...args: PriceFeedEthMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PriceFeedEthMock> {
    return super.deploy(overrides || {}) as Promise<PriceFeedEthMock>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PriceFeedEthMock {
    return super.attach(address) as PriceFeedEthMock;
  }
  override connect(signer: Signer): PriceFeedEthMock__factory {
    return super.connect(signer) as PriceFeedEthMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriceFeedEthMockInterface {
    return new utils.Interface(_abi) as PriceFeedEthMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceFeedEthMock {
    return new Contract(address, _abi, signerOrProvider) as PriceFeedEthMock;
  }
}
